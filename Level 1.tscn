[gd_scene load_steps=46 format=2]

[ext_resource path="res://Scenes/StickPlatform.tscn" type="PackedScene" id=1]
[ext_resource path="res://Scenes/Suraci.tscn" type="PackedScene" id=2]
[ext_resource path="res://God Ray.tres" type="Material" id=3]
[ext_resource path="res://Scenes/Ui.tscn" type="PackedScene" id=4]
[ext_resource path="res://Scenes/Platform.tscn" type="PackedScene" id=5]
[ext_resource path="res://Scenes/Platform2.tscn" type="PackedScene" id=6]
[ext_resource path="res://Sprites/Actias/BG_LEAVES_COLOR.png" type="Texture" id=7]
[ext_resource path="res://Sprites/Actias/BG_SKY_COLOR.png" type="Texture" id=8]
[ext_resource path="res://Sprites/Actias/BG_BRANCHES_COLOR.png" type="Texture" id=9]
[ext_resource path="res://Sprites/Actias/BG_BIGBRANCH_COLORS.png" type="Texture" id=10]
[ext_resource path="res://Sprites/Actias/BG_TREES_COLOR.png" type="Texture" id=11]
[ext_resource path="res://Scenes/MatchPlatform.tscn" type="PackedScene" id=12]
[ext_resource path="res://Scenes/Candle.tscn" type="PackedScene" id=13]
[ext_resource path="res://Scenes/Level 1.gd" type="Script" id=14]
[ext_resource path="res://Scenes/Spikes.tscn" type="PackedScene" id=15]
[ext_resource path="res://Wind.tres" type="Material" id=16]
[ext_resource path="res://Sprites/Actias/PLATFORM2_RED.png" type="Texture" id=17]
[ext_resource path="res://Sprites/Actias/PLATFORM2_ORANGE.png" type="Texture" id=18]
[ext_resource path="res://Sprites/Actias/PLATFORM_RED.png" type="Texture" id=19]
[ext_resource path="res://Sprites/Actias/PLATFORM4_ORANGE.png" type="Texture" id=20]
[ext_resource path="res://Sprites/Actias/PLATFORM3_ORANGE.png" type="Texture" id=21]
[ext_resource path="res://Sprites/Actias/PLATFORM_ORANGE.png" type="Texture" id=22]
[ext_resource path="res://Scenes/Checkpoint.tscn" type="PackedScene" id=23]

[sub_resource type="Shader" id=4]
code = "// original wind shader from https://github.com/Maujoe/godot-simple-wind-shader-2d/tree/master/assets/maujoe.simple_wind_shader_2d
// original script modified by HungryProton so that the assets are moving differently : https://pastebin.com/VL3AfV8D
//
// speed - The speed of the wind movement.
// minStrength - The minimal strength of the wind movement.
// maxStrength - The maximal strength of the wind movement.
// strengthScale - Scalefactor for the wind strength.
// interval - The time between minimal and maximal strength changes.
// detail - The detail (number of waves) of the wind movement.
// distortion - The strength of geometry distortion.
// heightOffset - The height where the wind begins to move. By default 0.0.

shader_type canvas_item;
render_mode blend_mix;

// Wind settings.
uniform float speed = 1.0;
uniform float minStrength : hint_range(0.0, 1.0) = 0.05;
uniform float maxStrength : hint_range(0.0, 1.0) = 0.01;
uniform float strengthScale = 100.0;
uniform float interval = 3.5;
uniform float detail = 1.0;
uniform float distortion : hint_range(0.0, 1.0);
uniform float heightOffset : hint_range(0.0, 1.0);

// With the offset value, you can if you want different moves for each asset. Just put a random value (1, 2, 3) in the editor. Don't forget to mark the material as unique if you use this
uniform float offset = 0; 


float getWind(vec2 vertex, vec2 uv, float time){
    float diff = pow(maxStrength - minStrength, 2.0);
    float strength = clamp(minStrength + diff + sin(time / interval) * diff, minStrength, maxStrength) * strengthScale;
    float wind = (sin(time) + cos(time * detail)) * strength * max(0.0, (1.0-uv.y) - heightOffset);
    
    return wind; 
}

void vertex() {
    vec4 pos = WORLD_MATRIX * vec4(0.0, 0.0, 0.0, 1.0);
    float time = TIME * speed + offset;
    //float time = TIME * speed + pos.x * pos.y  ; not working when moving...
    VERTEX.x += getWind(VERTEX.xy, UV, time);
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/speed = 1.639
shader_param/minStrength = 0.041
shader_param/maxStrength = 0.055
shader_param/strengthScale = 100.0
shader_param/interval = 3.5
shader_param/detail = 1.0
shader_param/distortion = 0.0
shader_param/heightOffset = 0.0
shader_param/offset = 0.0

[sub_resource type="Shader" id=7]
code = "// original wind shader from https://github.com/Maujoe/godot-simple-wind-shader-2d/tree/master/assets/maujoe.simple_wind_shader_2d
// original script modified by HungryProton so that the assets are moving differently : https://pastebin.com/VL3AfV8D
//
// speed - The speed of the wind movement.
// minStrength - The minimal strength of the wind movement.
// maxStrength - The maximal strength of the wind movement.
// strengthScale - Scalefactor for the wind strength.
// interval - The time between minimal and maximal strength changes.
// detail - The detail (number of waves) of the wind movement.
// distortion - The strength of geometry distortion.
// heightOffset - The height where the wind begins to move. By default 0.0.

shader_type canvas_item;
render_mode blend_mix;

// Wind settings.
uniform float speed = 1.0;
uniform float minStrength : hint_range(0.0, 1.0) = 0.05;
uniform float maxStrength : hint_range(0.0, 1.0) = 0.01;
uniform float strengthScale = 100.0;
uniform float interval = 3.5;
uniform float detail = 1.0;
uniform float distortion : hint_range(0.0, 1.0);
uniform float heightOffset : hint_range(0.0, 1.0);

// With the offset value, you can if you want different moves for each asset. Just put a random value (1, 2, 3) in the editor. Don't forget to mark the material as unique if you use this
uniform float offset = 0; 


float getWind(vec2 vertex, vec2 uv, float time){
    float diff = pow(maxStrength - minStrength, 2.0);
    float strength = clamp(minStrength + diff + sin(time / interval) * diff, minStrength, maxStrength) * strengthScale;
    float wind = (sin(time) + cos(time * detail)) * strength * max(0.0, (1.0-uv.y) - heightOffset);
    
    return wind; 
}

void vertex() {
    vec4 pos = WORLD_MATRIX * vec4(0.0, 0.0, 0.0, 1.0);
    float time = TIME * speed + offset;
    //float time = TIME * speed + pos.x * pos.y  ; not working when moving...
    VERTEX.x += getWind(VERTEX.xy, UV, time);
}"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )
shader_param/speed = 0.885
shader_param/minStrength = 0.095
shader_param/maxStrength = 0.028
shader_param/strengthScale = 100.0
shader_param/interval = 3.5
shader_param/detail = 1.0
shader_param/distortion = null
shader_param/heightOffset = null
shader_param/offset = 0.0

[sub_resource type="ShaderMaterial" id=6]

[sub_resource type="Shader" id=9]
code = "// original wind shader from https://github.com/Maujoe/godot-simple-wind-shader-2d/tree/master/assets/maujoe.simple_wind_shader_2d
// original script modified by HungryProton so that the assets are moving differently : https://pastebin.com/VL3AfV8D
//
// speed - The speed of the wind movement.
// minStrength - The minimal strength of the wind movement.
// maxStrength - The maximal strength of the wind movement.
// strengthScale - Scalefactor for the wind strength.
// interval - The time between minimal and maximal strength changes.
// detail - The detail (number of waves) of the wind movement.
// distortion - The strength of geometry distortion.
// heightOffset - The height where the wind begins to move. By default 0.0.

shader_type canvas_item;
render_mode blend_mix;

// Wind settings.
uniform float speed = 1.0;
uniform float minStrength : hint_range(0.0, 1.0) = 0.05;
uniform float maxStrength : hint_range(0.0, 1.0) = 0.01;
uniform float strengthScale = 100.0;
uniform float interval = 3.5;
uniform float detail = 1.0;
uniform float distortion : hint_range(0.0, 1.0);
uniform float heightOffset : hint_range(0.0, 1.0);

// With the offset value, you can if you want different moves for each asset. Just put a random value (1, 2, 3) in the editor. Don't forget to mark the material as unique if you use this
uniform float offset = 0; 


float getWind(vec2 vertex, vec2 uv, float time){
    float diff = pow(maxStrength - minStrength, 2.0);
    float strength = clamp(minStrength + diff + sin(time / interval) * diff, minStrength, maxStrength) * strengthScale;
    float wind = (sin(time) + cos(time * detail)) * strength * max(0.0, (1.0-uv.y) - heightOffset);
    
    return wind; 
}

void vertex() {
    vec4 pos = WORLD_MATRIX * vec4(0.0, 0.0, 0.0, 1.0);
    float time = TIME * speed + offset;
    //float time = TIME * speed + pos.x * pos.y  ; not working when moving...
    VERTEX.x += getWind(VERTEX.xy, UV, time);
}"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )
shader_param/speed = 0.755
shader_param/minStrength = 0.086
shader_param/maxStrength = 0.037
shader_param/strengthScale = 100.0
shader_param/interval = 3.5
shader_param/detail = 1.0
shader_param/distortion = null
shader_param/heightOffset = null
shader_param/offset = 0.0

[sub_resource type="Shader" id=2]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/angle = 0.201
shader_param/position = 0.101
shader_param/spread = 0.843
shader_param/cutoff = 0.188
shader_param/falloff = 1.0
shader_param/edge_fade = 0.214
shader_param/speed = 1.929
shader_param/ray1_density = 8.0
shader_param/ray2_density = 30.0
shader_param/ray2_intensity = 0.717
shader_param/color = Color( 0.427451, 0.384314, 0.286275, 0.8 )
shader_param/hdr = false
shader_param/seed = 3.0

[sub_resource type="Shader" id=11]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}"

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 11 )
shader_param/angle = 0.106
shader_param/position = 0.146
shader_param/spread = 0.545
shader_param/cutoff = 0.118
shader_param/falloff = 0.809
shader_param/edge_fade = 0.15
shader_param/speed = 2.19
shader_param/ray1_density = 11.909
shader_param/ray2_density = 15.898
shader_param/ray2_intensity = 0.463
shader_param/color = Color( 0.427451, 0.384314, 0.286275, 0.8 )
shader_param/hdr = false
shader_param/seed = 10.0

[sub_resource type="Shader" id=13]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}"

[sub_resource type="ShaderMaterial" id=14]
shader = SubResource( 13 )
shader_param/angle = 0.487
shader_param/position = 0.19
shader_param/spread = 0.418
shader_param/cutoff = 0.1
shader_param/falloff = 0.464
shader_param/edge_fade = 0.177
shader_param/speed = 1.629
shader_param/ray1_density = 8.994
shader_param/ray2_density = 30.0
shader_param/ray2_intensity = 0.536
shader_param/color = Color( 0.427451, 0.384314, 0.286275, 0.8 )
shader_param/hdr = false
shader_param/seed = 2.0

[sub_resource type="Shader" id=17]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}"

[sub_resource type="ShaderMaterial" id=18]
shader = SubResource( 17 )
shader_param/angle = 0.276
shader_param/position = 0.185
shader_param/spread = 0.482
shader_param/cutoff = 0.064
shader_param/falloff = 0.391
shader_param/edge_fade = 0.214
shader_param/speed = 2.972
shader_param/ray1_density = 7.285
shader_param/ray2_density = 32.475
shader_param/ray2_intensity = 0.3
shader_param/color = Color( 0.427451, 0.384314, 0.286275, 0.8 )
shader_param/hdr = false
shader_param/seed = 20.0

[sub_resource type="Shader" id=15]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}"

[sub_resource type="ShaderMaterial" id=16]
shader = SubResource( 15 )
shader_param/angle = 0.117
shader_param/position = 0.077
shader_param/spread = 0.6
shader_param/cutoff = 0.064
shader_param/falloff = 0.4
shader_param/edge_fade = 0.214
shader_param/speed = 2.424
shader_param/ray1_density = 8.0
shader_param/ray2_density = 30.0
shader_param/ray2_intensity = 0.564
shader_param/color = Color( 0.427451, 0.384314, 0.286275, 0.8 )
shader_param/hdr = false
shader_param/seed = 8.0

[sub_resource type="Shader" id=19]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}"

[sub_resource type="ShaderMaterial" id=20]
shader = SubResource( 19 )
shader_param/angle = 0.46
shader_param/position = 0.207
shader_param/spread = 0.627
shader_param/cutoff = 0.027
shader_param/falloff = 0.618
shader_param/edge_fade = 0.268
shader_param/speed = 3.123
shader_param/ray1_density = 8.0
shader_param/ray2_density = 30.0
shader_param/ray2_intensity = 0.6
shader_param/color = Color( 0.427451, 0.384314, 0.286275, 0.8 )
shader_param/hdr = false
shader_param/seed = 20.0

[sub_resource type="Shader" id=21]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}"

[sub_resource type="ShaderMaterial" id=22]
shader = SubResource( 21 )
shader_param/angle = 0.026
shader_param/position = 0.074
shader_param/spread = 0.59
shader_param/cutoff = 0.034
shader_param/falloff = 0.454
shader_param/edge_fade = 0.216
shader_param/speed = 2.568
shader_param/ray1_density = 13.323
shader_param/ray2_density = 31.035
shader_param/ray2_intensity = 0.407
shader_param/color = Color( 0.427451, 0.384314, 0.286275, 0.8 )
shader_param/hdr = false
shader_param/seed = 25.0

[sub_resource type="RectangleShape2D" id=23]
extents = Vector2( 168, 96 )

[node name="Level 1" type="Node2D"]
position = Vector2( -124.727, -7.1272 )
script = ExtResource( 14 )

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]
layer = -1
follow_viewport_scale = 0.001

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxBackground"]
show_behind_parent = true
motion_scale = Vector2( 0.4, 1 )
motion_mirroring = Vector2( 1496, 0 )

[node name="Sprite" type="Sprite" parent="ParallaxBackground/ParallaxLayer"]
show_behind_parent = true
texture = ExtResource( 8 )
centered = false

[node name="CanvasModulate" type="CanvasModulate" parent="ParallaxBackground/ParallaxLayer"]
show_behind_parent = true
color = Color( 0.435294, 0.435294, 0.435294, 1 )

[node name="ParallaxLayer5" type="ParallaxLayer" parent="ParallaxBackground"]
motion_scale = Vector2( 0.1, 1 )
motion_mirroring = Vector2( 1496, 0 )

[node name="Sprite" type="Sprite" parent="ParallaxBackground/ParallaxLayer5"]
material = ExtResource( 16 )
texture = ExtResource( 11 )
centered = false

[node name="ParallaxLayer2" type="ParallaxLayer" parent="ParallaxBackground"]
motion_scale = Vector2( 0.5, 1 )
motion_mirroring = Vector2( 1496, 0 )

[node name="Sprite" type="Sprite" parent="ParallaxBackground/ParallaxLayer2"]
material = SubResource( 5 )
texture = ExtResource( 7 )
centered = false

[node name="ParallaxLayer4" type="ParallaxLayer" parent="ParallaxBackground"]
motion_scale = Vector2( 0.65, 1 )
motion_mirroring = Vector2( 1496, 0 )

[node name="Sprite" type="Sprite" parent="ParallaxBackground/ParallaxLayer4"]
material = SubResource( 8 )
texture = ExtResource( 10 )
centered = false

[node name="ParallaxLayer3" type="ParallaxLayer" parent="ParallaxBackground"]
material = SubResource( 6 )
motion_scale = Vector2( 0.8, 1 )
motion_mirroring = Vector2( 1496, 0 )

[node name="Sprite" type="Sprite" parent="ParallaxBackground/ParallaxLayer3"]
material = SubResource( 10 )
texture = ExtResource( 9 )
centered = false

[node name="Suraci" parent="." instance=ExtResource( 2 )]
position = Vector2( 12620.7, 471.127 )

[node name="Camera2D" type="Camera2D" parent="Suraci"]
current = true
process_mode = 0
limit_left = 0
limit_top = 0
limit_right = 13760
limit_bottom = 592
limit_smoothed = true
smoothing_enabled = true
smoothing_speed = 10.0

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="Ui" parent="CanvasLayer" instance=ExtResource( 4 )]

[node name="God Rays" type="Node2D" parent="."]

[node name="ColorRect" type="ColorRect" parent="God Rays"]
material = ExtResource( 3 )
margin_left = 272.0
margin_top = 5.48529
margin_right = 1296.0
margin_bottom = 597.485
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect2" type="ColorRect" parent="God Rays"]
material = SubResource( 3 )
margin_left = 1954.97
margin_top = 6.14215
margin_right = 2978.97
margin_bottom = 598.142
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect3" type="ColorRect" parent="God Rays"]
material = SubResource( 12 )
margin_left = 3092.39
margin_top = 7.1272
margin_right = 4116.39
margin_bottom = 599.127
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect4" type="ColorRect" parent="God Rays"]
material = SubResource( 14 )
margin_left = 5727.28
margin_top = 7.1272
margin_right = 6751.28
margin_bottom = 599.127
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect5" type="ColorRect" parent="God Rays"]
material = SubResource( 18 )
margin_left = 4471.13
margin_top = 7.1272
margin_right = 5495.13
margin_bottom = 600.127
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect6" type="ColorRect" parent="God Rays"]
material = SubResource( 16 )
margin_left = 7745.96
margin_top = 7.1272
margin_right = 8769.96
margin_bottom = 599.128
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect7" type="ColorRect" parent="God Rays"]
material = SubResource( 20 )
margin_left = 9521.02
margin_top = 7.1272
margin_right = 10545.0
margin_bottom = 599.128
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect8" type="ColorRect" parent="God Rays"]
material = SubResource( 22 )
margin_left = 11740.7
margin_top = 7.1272
margin_right = 12764.7
margin_bottom = 599.128
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Platforms" type="Node2D" parent="."]

[node name="TwigPlatform" parent="Platforms" instance=ExtResource( 5 )]
position = Vector2( 208, 528 )

[node name="TwigPlatform2" parent="Platforms" instance=ExtResource( 5 )]
position = Vector2( 4531.5, 554.511 )

[node name="Sprite" parent="Platforms/TwigPlatform2" index="0"]
texture = ExtResource( 17 )

[node name="TwigPlatform3" parent="Platforms" instance=ExtResource( 5 )]
position = Vector2( 9716.73, 527.127 )

[node name="Sprite" parent="Platforms/TwigPlatform3" index="0"]
texture = ExtResource( 18 )

[node name="LeafPlatform" parent="Platforms" instance=ExtResource( 6 )]
position = Vector2( 800, 520 )

[node name="LeafPlatform2" parent="Platforms" instance=ExtResource( 6 )]
position = Vector2( 7187.77, 521.005 )

[node name="Sprite" parent="Platforms/LeafPlatform2" index="0"]
texture = ExtResource( 21 )

[node name="MatchPlatform" parent="Platforms" instance=ExtResource( 12 )]
position = Vector2( 1936, 240 )

[node name="MatchPlatform2" parent="Platforms" instance=ExtResource( 12 )]
position = Vector2( 5800, 240 )

[node name="Sprite" parent="Platforms/MatchPlatform2" index="0"]
texture = ExtResource( 20 )

[node name="MatchPlatform3" parent="Platforms" instance=ExtResource( 12 )]
position = Vector2( 11122.7, 218.643 )

[node name="Sprite" parent="Platforms/MatchPlatform3" index="0"]
texture = ExtResource( 20 )

[node name="StickPlatform" parent="Platforms" instance=ExtResource( 1 )]
position = Vector2( 1416, 406 )
rotation = -0.266113

[node name="StickPlatform2" parent="Platforms" instance=ExtResource( 1 )]
position = Vector2( 2536, 432.505 )

[node name="Sprite" parent="Platforms/StickPlatform2" index="0"]
texture = ExtResource( 19 )

[node name="StickPlatform3" parent="Platforms" instance=ExtResource( 1 )]
position = Vector2( 3472, 432.505 )

[node name="StickPlatform4" parent="Platforms" instance=ExtResource( 1 )]
position = Vector2( 5184, 384.542 )
rotation = -0.294593

[node name="Sprite" parent="Platforms/StickPlatform4" index="0"]
texture = ExtResource( 22 )

[node name="StickPlatform5" parent="Platforms" instance=ExtResource( 1 )]
position = Vector2( 6512, 403.011 )
rotation = 0.384138

[node name="StickPlatform6" parent="Platforms" instance=ExtResource( 1 )]
position = Vector2( 7745.96, 402.857 )

[node name="StickPlatform7" parent="Platforms" instance=ExtResource( 1 )]
position = Vector2( 8311.77, 533.285 )

[node name="Sprite" parent="Platforms/StickPlatform7" index="0"]
texture = ExtResource( 19 )

[node name="StickPlatform8" parent="Platforms" instance=ExtResource( 1 )]
position = Vector2( 8865.64, 426.979 )

[node name="Sprite" parent="Platforms/StickPlatform8" index="0"]
texture = ExtResource( 22 )

[node name="StickPlatform9" parent="Platforms" instance=ExtResource( 1 )]
position = Vector2( 10553.5, 384.541 )
rotation = -0.523598

[node name="StickPlatform10" parent="Platforms" instance=ExtResource( 1 )]
position = Vector2( 11692.9, 388.643 )
rotation = 0.523598

[node name="StickPlatform11" parent="Platforms" instance=ExtResource( 1 )]
position = Vector2( 12503.5, 536.64 )

[node name="Sprite" parent="Platforms/StickPlatform11" index="0"]
texture = ExtResource( 19 )

[node name="StickPlatform12" parent="Platforms" instance=ExtResource( 1 )]
position = Vector2( 13324.7, 535.127 )

[node name="Matches" type="Node2D" parent="."]
show_behind_parent = true

[node name="Candle" parent="Matches" instance=ExtResource( 13 )]
position = Vector2( 2536, 433.011 )

[node name="Candle2" parent="Matches" instance=ExtResource( 13 )]
position = Vector2( 3472.18, 432 )

[node name="Candle3" parent="Matches" instance=ExtResource( 13 )]
position = Vector2( 7747.6, 411.582 )

[node name="Candle4" parent="Matches" instance=ExtResource( 13 )]
position = Vector2( 8869.03, 432.064 )

[node name="Candle5" parent="Matches" instance=ExtResource( 13 )]
position = Vector2( 12501.4, 545.923 )

[node name="Spikes" type="Node2D" parent="."]

[node name="Spikes3" parent="Spikes" instance=ExtResource( 15 )]
position = Vector2( 4531.5, 384.541 )
rotation = 0.0516831

[node name="Spikes4" parent="Spikes" instance=ExtResource( 15 )]
position = Vector2( 8179.01, 460.323 )
rotation = 0.0516831

[node name="Spikes5" parent="Spikes" instance=ExtResource( 15 )]
position = Vector2( 8325.85, 465.085 )

[node name="Spikes6" parent="Spikes" instance=ExtResource( 15 )]
position = Vector2( 8459.19, 461.911 )
rotation = -0.113446

[node name="Area2D" type="Area2D" parent="."]
position = Vector2( 13324.7, 463.127 )
__meta__ = {
"_edit_group_": true
}

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
shape = SubResource( 23 )

[node name="Timer" type="Timer" parent="Area2D"]

[node name="Checkpoint" parent="." instance=ExtResource( 23 )]
position = Vector2( 7172.73, 399.127 )

[node name="MusicTimer" type="Timer" parent="."]
wait_time = 0.7
one_shot = true

[connection signal="health_updated" from="Suraci" to="." method="_on_Suraci_health_updated"]
[connection signal="body_entered" from="Area2D" to="." method="_on_Area2D_body_entered"]
[connection signal="timeout" from="MusicTimer" to="." method="_on_Timer_timeout"]

[editable path="Platforms/TwigPlatform2"]
[editable path="Platforms/TwigPlatform3"]
[editable path="Platforms/LeafPlatform2"]
[editable path="Platforms/MatchPlatform2"]
[editable path="Platforms/MatchPlatform3"]
[editable path="Platforms/StickPlatform2"]
[editable path="Platforms/StickPlatform4"]
[editable path="Platforms/StickPlatform7"]
[editable path="Platforms/StickPlatform8"]
[editable path="Platforms/StickPlatform11"]
