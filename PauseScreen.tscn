[gd_scene load_steps=9 format=2]

[ext_resource path="res://FeFCsc2.ttf" type="DynamicFontData" id=1]
[ext_resource path="res://new_theme.tres" type="Theme" id=2]
[ext_resource path="res://Scenes/PauseScreen.gd" type="Script" id=3]

[sub_resource type="Shader" id=1]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/teleport-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float progress : hint_range(0.0, 1.0);
uniform float noise_desnity = 60;
uniform float beam_size : hint_range(0.01, 0.15);
uniform vec4 color : hint_color = vec4(0.0, 1.02, 1.2, 1.0);

// We are generating our own noise here. You could experiment with the 
// built in SimplexNoise or your own noise texture for other effects.
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

void fragment()
{
	vec4 tex = texture(TEXTURE, UV);
	
	float noise = noise(UV * noise_desnity) * UV.y;
	
	float d1 = step(progress, noise);
	float d2 = step(progress - beam_size, noise);
	
	vec3 beam = vec3(d2 - d1) * color.rgb;
	
	tex.rgb += beam;
	tex.a *= d2;
	
	COLOR = tex;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/progress = 1.0
shader_param/noise_desnity = 60.0
shader_param/beam_size = null
shader_param/color = Color( 0, 1.02, 1.2, 1 )

[sub_resource type="DynamicFont" id=3]
size = 60
font_data = ExtResource( 1 )

[sub_resource type="Animation" id=5]
resource_name = "Idle"
length = 2.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("VBoxContainer/Label:rect_position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 0.450625, 2.73208 ),
"update": 0,
"values": [ Vector2( 0, 0 ), Vector2( 0, -10 ) ]
}

[sub_resource type="Animation" id=4]
resource_name = "Open"
length = 6.0
tracks/0/type = "value"
tracks/0/path = NodePath("ColorRect:material:shader_param/progress")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5, 2.5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 1.0, 1.0, 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("VBoxContainer/Label:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 4, 5.5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("VBoxContainer/Label:rect_position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 4, 5.5 ),
"transitions": PoolRealArray( 0.329877, 2.92817 ),
"update": 0,
"values": [ Vector2( 0, -20 ), Vector2( 0, 0 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("VBoxContainer/VBoxContainer/Button3:modulate")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 4, 5.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("VBoxContainer/VBoxContainer/Button:modulate")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 4, 5.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[node name="PauseScreen" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 3 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label" type="Label" parent="VBoxContainer"]
modulate = Color( 1, 1, 1, 0 )
margin_top = -19.7404
margin_right = 1024.0
margin_bottom = 274.26
size_flags_horizontal = 7
size_flags_vertical = 3
custom_colors/font_color = Color( 0.466667, 0.466667, 0.466667, 1 )
custom_colors/font_color_shadow = Color( 0, 0, 0, 1 )
custom_fonts/font = SubResource( 3 )
text = "Pause Menu"
align = 1
valign = 1

[node name="VBoxContainer" type="VBoxContainer" parent="VBoxContainer"]
margin_top = 298.0
margin_right = 1024.0
margin_bottom = 592.0
size_flags_vertical = 3
alignment = 1

[node name="Button" type="Button" parent="VBoxContainer/VBoxContainer"]
modulate = Color( 1, 1, 1, 0.0042998 )
margin_left = 482.0
margin_top = 125.0
margin_right = 542.0
margin_bottom = 145.0
size_flags_horizontal = 4
theme = ExtResource( 2 )
text = "Resume"

[node name="Button3" type="Button" parent="VBoxContainer/VBoxContainer"]
modulate = Color( 1, 1, 1, 0.0042998 )
margin_left = 491.0
margin_top = 149.0
margin_right = 533.0
margin_bottom = 169.0
size_flags_horizontal = 4
theme = ExtResource( 2 )
text = "Quit"

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/Idle = SubResource( 5 )
anims/Open = SubResource( 4 )

[connection signal="pressed" from="VBoxContainer/VBoxContainer/Button" to="." method="_on_Button_pressed"]
[connection signal="animation_finished" from="AnimationPlayer" to="." method="_on_AnimationPlayer_animation_finished"]
